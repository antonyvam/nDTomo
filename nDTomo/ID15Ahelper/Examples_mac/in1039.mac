
def printedcatalysts '{

	xrdconf
	
	xrdct3d .05 -7.0 -6.5 0.05 0.025 MnNaWprinted17017_ZZ 9
	
	xrdct3d .05 8.0 8.5 0.05 0.025 MnNaWprinted17018_ZZ 9
	
	absconf
	
	umv hrz -6.75
	absct_stitched MnNaWprinted17017 0.2 -102.5 -97.5
	
	umv hrz 8.25	
	absct_stitched MnNaWprinted17018 0.2 -102.5 -97.5
	
	shclose

}'

def printedcatalystsOCM '{

#	xrdconf

#	xrdct3d .05 3.0 3.0 0.05 0.025 DarkCatalyst_OCM_top2_ZZ 10
	
#	xrdct3d .05 6.0 6.4 0.05 0.025 DarkCatalyst_OCM_3D_ZZ 10
	
#	xrdct3d .05 10.5 10.5 0.05 0.025 DarkCatalyst_OCM_bottom_ZZ 10	
	
#	xrdct3d .05 21.8 21.8 0.05 0.025 LightCatalyst_OCM_top_ZZ 10

#	xrdct3d .05 25.0 25.4 0.05 0.025 LightCatalyst_OCM_3D_ZZ 10

	xrdct3d .05 29.0 29.0 0.05 0.025 LightCatalyst_OCM_bottomREP6_ZZ 10
	
	shclose

}'

def printedcatalystsCal '{

	xrdconf
	
	xrdct3d .05 -4.0 -3.45 0.05 0.025 MnNaWprinted17017Cal_ZZ 9
	
	xrdct3d .05 10.0 10.45 0.05 0.025 MnNaWprinted17018Cal_ZZ 9
	
	absconf
	
	umv hrz -4
	absct_stitched MnNaWprinted17017 0.2 -102.5 -97.5
	
	umv hrz 10	
	absct_stitched MnNaWprinted17018 0.2 -102.5 -97.5
	
	shclose

}'

def JM_reactors '{

#	xrdconf
	
	xrdct3d .05 7.0 7.0 0.05 0.025 JM_reactor_15hr_950C_hrz7 6

	xrdct3d .05 13.0 13.0 0.05 0.025 JM_reactor_15hr_950C_hrz13 6

	xrdct3d .05 20.0 20.0 0.05 0.025 JM_reactor_15hr_950C_hrz20 6

	xrdct3d .05 27.0 27.0 0.05 0.025 JM_reactor_15hr_950C_hrz27 6
		
	shclose

}'

def Foam_catalyst '{

    local prefix zpos newprefix t0 t jjj
    
    if ( $# != 2 ) { p "Usage: reduction prefix z_pos" ; exit }
    
#   input parameters
    prefix = "$1"
    zpos = $2
    
    xrdconf
##### XRD-CT scans during reduction

    newprefix = sprintf("%s_Red5",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-4,zpos-4,newprefix))
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+4,zpos+4,newprefix))


#   t0 = time() ; t = time() ;
#   jjj=0
#   while( (t-t0) < (60*20) ) {
   
#    	newprefix = sprintf("%s_Red_0_%.3d",prefix,jjj) ;
#	umv hrz zpos-4; eval(sprintf("oneshot_norot %s",newprefix))
	
#    	newprefix = sprintf("%s_Red_1_%.3d",prefix,jjj) ;	
#	umv hrz zpos; eval(sprintf("oneshot_norot %s",newprefix))

#    	newprefix = sprintf("%s_Red_2_%.3d",prefix,jjj) ;
#	umv hrz zpos+4; eval(sprintf("oneshot_norot %s",newprefix))
		
#	t = time() ;
#	jjj++
#    }

##### Change gasses
#    yesno("Change gasses","1")
#    shopen
    

##### XRD-CT scans during CPO

#   t0 = time() ; t = time() ;
#   jjj=0
 
#   while( (t-t0) < (3*3600) ) {   
#    	newprefix = sprintf("%s_POX_%.3d",prefix,jjj) ;

#        eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-4,zpos-4,newprefix))

#        eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

#        eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+4,zpos+4,newprefix))

#	t = time() ;
#	jjj++
#    }
    

##### XRD-CT scans during reduction

    newprefix = sprintf("%s_POXend",prefix) ;
    
    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-4,zpos-4,newprefix))
    
    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+4,zpos+4,newprefix))


#####  Cool to RT
    euro2400parameters unit=3 RampRate=20 ; umv euro0 2 ;
    

}'

def Foam_catalyst3D '{

	fastxrdct3d 0.05 9.85 10.25 0.05 0.02 Foam_catalyst3D_RT 6.0 8.0

}'

def POX_catalyst3D '{

	fastxrdct3d 0.035 8.0 12.0 0.05 0.01 POX_catalyst_3D 2.0 3.0

}'

def POX_catalyst3Dre '{

	fastxrdct3d 0.05 0 1.0 0.05 0.02 POX_catalyst_3D_re2 2.0 3.0

}'

def OxygenCarrier '{
    
    local prefix zpos newprefix t0 t jjj
    
    if ( $# != 2 ) { p "Usage: reduction prefix z_pos" ; exit }

    prefix = "$1"
    zpos = $2
        
#    xrdconf ;
    
##### XRD-CT scans at RT

#    newprefix = sprintf("%s_RT",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))
    
##### Temperature ramp
#    tt = 95
#    euro2400parameters unit=3 RampRate=15
#    umv euro0 tt ; ct 1 ; while( S[euro0pv] < (tt-1) ) { ct 1 ; sleep(12) } 
    
##### XRD-CT at temperature
#    yesno("Reached temperature","1")
#    shopen

#    newprefix = sprintf("%s_Tf_He",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.02 %s 6",zpos-3,zpos-3,newprefix))
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.02 %s 6",zpos,zpos,newprefix))

#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.02 %s 6",zpos+3,zpos+3,newprefix))
            
##### Change gasses and collect point XRD measurements for 20 min
#    shclose
#    yesno("Change gasses to CH4-He","1")
    
#    shopen
    
 #   t0 = time() ; t = time() ;
  #  jjj=0
  #  while( (t-t0) < (60*20) ) {
   
    #	newprefix = sprintf("%s_Red1_0_%.3d",prefix,jjj) ;
	#umv hrz zpos-3; eval(sprintf("oneshot_norot %s",newprefix))
	
    	#newprefix = sprintf("%s_Red1_1_%.3d",prefix,jjj) ;	
	#umv hrz zpos; eval(sprintf("oneshot_norot %s",newprefix))

    	#newprefix = sprintf("%s_Red1_2_%.3d",prefix,jjj) ;
	#umv hrz zpos+3; eval(sprintf("oneshot_norot %s",newprefix))
		
	#t = time() ;
	#jjj++
   # }


#### Change gas to He and collect XRD-CT
   # shclose
   # yesno("Change gasses to He","1")
    
    #newprefix = sprintf("%s_Red1",prefix) ;
    
    #eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-3,zpos-3,newprefix))
    
    #eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

    #eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+3,zpos+3,newprefix))
    

##### Change gasses and collect point XRD measurements for 20 min
#    shopen
#    yesno("Change gasses to CH4-He","1")
    
#    t0 = time() ; t = time() ;
#    jjj=0
#    while( (t-t0) < (60*20) ) {
   
#    	newprefix = sprintf("%s_Red2_0_%.3d",prefix,jjj) ;
#	umv hrz zpos-3; eval(sprintf("oneshot_norot %s",newprefix))
	
#    	newprefix = sprintf("%s_Red2_1_%.3d",prefix,jjj) ;	
#	umv hrz zpos; eval(sprintf("oneshot_norot %s",newprefix))

#    	newprefix = sprintf("%s_Red2_2_%.3d",prefix,jjj) ;
#	umv hrz zpos+3; eval(sprintf("oneshot_norot %s",newprefix))
		
#	t = time() ;
#	jjj++
#    }


#### Change gas to He and collect XRD-CT
   shopen
    yesno("Change gasses to He","1")
    
   newprefix = sprintf("%s_AfterO2",prefix) ;
    
   eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-3,zpos-3,newprefix))
   
   eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

   eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+3,zpos+3,newprefix))
    

##### Change gasses and collect point XRD measurements for 20 min
#    shopen
#    yesno("Change gasses to CH4-He","1")
    
#    t0 = time() ; t = time() ;
 #   jjj=0
 #   while( (t-t0) < (60*20) ) {
   
   # 	newprefix = sprintf("%s_Red3_0_%.3d",prefix,jjj) ;
#	umv hrz zpos-3; eval(sprintf("oneshot_norot %s",newprefix))
	
   # 	newprefix = sprintf("%s_Red3_1_%.3d",prefix,jjj) ;	
#	umv hrz zpos; eval(sprintf("oneshot_norot %s",newprefix))

   # 	newprefix = sprintf("%s_Red3_2_%.3d",prefix,jjj) ;
#	umv hrz zpos+3; eval(sprintf("oneshot_norot %s",newprefix))
		
#	t = time() ;
#	jjj++
 #   }    

#### Change gas to O2 
#    shclose
#    yesno("Change gasses to O2 - He","1")


#### Collect point XRD measurements for 5 min

 #   t0 = time() ; t = time() ;
 #   jjj=0
  #  umv hrz zpos-3; 
   # while( (t-t0) < (60*5) ) {
   
    # 	newprefix = sprintf("%s_O2_1_0_%.3d",prefix,jjj) ;
	
#	eval(sprintf("oneshot_norot %s",newprefix))
	
#	t = time() ;
	#jjj++
    #}

#### Collect XRD-CT during oxidation
        
#    newprefix = sprintf("%s_O2",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))   

#### Collect point XRD measurements for 15 min

#    t0 = time() ; t = time() ;
#    jjj=0
#    while( (t-t0) < (60*15) ) {
   
#    	newprefix = sprintf("%s_O2_2_0_%.3d",prefix,jjj) ;
#	umv hrz zpos-2; eval(sprintf("oneshot_norot %s",newprefix))
	
#    	newprefix = sprintf("%s_O2_2_1_%.3d",prefix,jjj) ;	
#	umv hrz zpos; eval(sprintf("oneshot_norot %s",newprefix))

#    	newprefix = sprintf("%s_O2_2_2_%.3d",prefix,jjj) ;
#	umv hrz zpos+2; eval(sprintf("oneshot_norot %s",newprefix))
		
#	t = time() ;
#	jjj++
#    }
    
#####  Cool to RT
#    euro2400parameters unit=3 RampRate=20 ; umv euro0 2 ;

}'


def OCM_experiment '{

    local prefix zpos newprefix t0 t jjj tt
    
    if ( $# != 2 ) { p "Usage: reduction prefix z_pos" ; exit }

    prefix = "$1"
    zpos = $2
    
    #umv tz 0   
    
##### XRD-CT in 3 positions at RT
    
#    newprefix = sprintf("%s_RT",prefix) ;
#    p newprefix
#    sleep(10)
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.025 %s 6",zpos-3,zpos-3,newprefix))
   
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.025 %s 6",zpos,zpos,newprefix))

#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.025 %s 6",zpos+3,zpos+3,newprefix))

#### Start ramping to 870 deg C
 #   p newprefix
 #   sleep(5)PV
 #   
 #      tt = 87
 #      euro2400parameters unit=3 RampRate=15
 #      umv euro0 tt ; ct 1 ; 
 #      jjj=0; 
 #      while( S[euro0pv] < (tt-5) ) { 
 #           ct 1 ; 
#	    newprefix = sprintf("%s_XRDCT_ramp_%.3d",prefix,jjj) ;
#	    	
#	    eval(sprintf("xrdct3d .05 %f %f 0.05 0.025 %s 6",zpos,zpos,newprefix)) 
#	    
#	    jjj++
#	    
#	    } 
    
       
#### XRD-CT at temperature at 3 positions       
       
#    newprefix = sprintf("%s_HT",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-3,zpos-3,newprefix))
   
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+3,zpos+3,newprefix))
    
#### Switch to OCM conditions
       
#     yesno("Change gasses to O2 - CH4","1")
       
#### XRD-CT at 3 positions in loop for 5h
     
#    p newprefix
#    sleep(5) 
#    t0 = time() ; t = time() ;
#    jjj=0
#    while( (t-t0) < (60*60*4) ) {
   #
    #	newprefix = sprintf("%s_OCM_0_%.3d",prefix,jjj) ;

	#eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-3,zpos-3,newprefix))
	
    #	newprefix = sprintf("%s_OCM_1_%.3d",prefix,jjj) ;	
#	eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

    #	newprefix = sprintf("%s_OCM_2_%.3d",prefix,jjj) ;
#	eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+3,zpos+3,newprefix))
		
#	t = time() ;
#	jjj++
#    }    

####  Ramping to 950
 
    
#       tt = 95
#       euro2400parameters unit=3 RampRate=15
#       umv euro0 tt ; ct 1 ; while( S[euro0pv] < (tt-1) ) { ct 1 ; sleep(12) } 
       
#### Middle position XRD-CT scans

#    newprefix = sprintf("%s_OCM_0_950",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))
    
#    newprefix = sprintf("%s_OCM_1_950",prefix) ;
    
#    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))
    
#    newprefix = sprintf("%s_OCM_2_950",prefix) ;
    
 #   eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))
    
#### Cool down to room temperature

   
#     tt = 2
#     euro2400parameters unit=3 RampRate=20
#     umv euro0 tt ; ct 1 ; while( S[euro0pv] > (tt+1) ) { ct 1 ; sleep(12) } 
        
#### XRD-CT at room temperature
   
    newprefix = sprintf("%s_RT_after",prefix) ;
    
    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos-3,zpos-3,newprefix))
   
    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos,zpos,newprefix))

    eval(sprintf("xrdct3d .05 %f %f 0.05 0.05 %s 6",zpos+3,zpos+3,newprefix))
   

}'

def Battery3DXRDCT '{

    local prefix zpos newprefix t0 t jjj tt
    
    if ( $# != 2 ) { p "Usage: reduction prefix z_pos" ; exit }

    prefix = "$1"
    zpos = $2
    sleep(5)
    
    t0 = time() ; t = time() ;
    jjj=0
#    while( (t-t0) < (60*60*20) ) {
#   
#    	newprefix = sprintf("%s_0_%.3d",prefix,jjj) ;
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos-0.01,zpos-0.01,newprefix))
#	p "Sleeping for 5 s";sleep(5)
#
#    	newprefix = sprintf("%s_1_%.3d",prefix,jjj) ;	
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos,zpos,newprefix))
#	p "Sleeping for 5 s";sleep(5)
#	
#    	newprefix = sprintf("%s_2_%.3d",prefix,jjj) ;
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.01,zpos+0.01,newprefix))
#	p "Sleeping for 5 s";sleep(5)
	
#	t = time() ;
#	jjj++
#    }        


    jjj=42
#    	newprefix = sprintf("%s_0_%.3d",prefix,jjj) ;
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos-0.01,zpos-0.01,newprefix))
#	p "Sleeping for 5 s";sleep(5)

#    	newprefix = sprintf("%s_1_%.3d",prefix,jjj) ;	
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos,zpos,newprefix))
#	p "Sleeping for 5 s";sleep(5)
	
#    	newprefix = sprintf("%s_2_%.3d",prefix,jjj) ;
#	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.01,zpos+0.01,newprefix))
#	p "Sleeping for 5 s";sleep(5)        
    
    jjj=0

    	newprefix = sprintf("%s_0_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos-0.03,zpos-0.03,newprefix))
	p "Sleeping for 5 s";sleep(5)
	
    	newprefix = sprintf("%s_1_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos-0.02,zpos-0.02,newprefix))
	p "Sleeping for 5 s";sleep(5)

    	newprefix = sprintf("%s_2_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos-0.01,zpos-0.01,newprefix))
	p "Sleeping for 5 s";sleep(5)

    	newprefix = sprintf("%s_3_%.3d",prefix,jjj) ;	
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos,zpos,newprefix))
	p "Sleeping for 5 s";sleep(5)
	
    	newprefix = sprintf("%s_4_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.01,zpos+0.01,newprefix))
	p "Sleeping for 5 s";sleep(5)  
	
    	newprefix = sprintf("%s_5_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.02,zpos+0.02,newprefix))
	p "Sleeping for 5 s";sleep(5)  	
	
    	newprefix = sprintf("%s_6_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.03,zpos+0.03,newprefix))
	p "Sleeping for 5 s";sleep(5)  		

    	newprefix = sprintf("%s_7_%.3d",prefix,jjj) ;
	eval(sprintf("xrdct3d .2 %f %f 0.01 0.1 %s 13",zpos+0.04,zpos+0.04,newprefix))
	p "Sleeping for 5 s";sleep(5)  

}'

def xrdct3d '{

	if($# != 7){
		printf("Usage: %s ystep z_min z_max zstep acq_time base_name sample_size\n","$0")
		exit
	}

    global FAST_SCAN2D_PAR FAST_SCAN
    local sample_size scan_range y_resolution omega_start n_omega omega_step y_start rot_cen upw speed exp_time exp_period str 
    local xrddir iii stem prefix parfile specfile
	
# fixed parameters
#    sample_size = 10.2 # for d = 4mm
	sample_size = $7
    scan_range = sample_size + 1.0
#    scan_range = sample_size + 2.0
#    scan_range = 22

    rot_cen = -100
    omega_start = 0
	p "Sample Size =",sample_size
	p "Scan Range =", scan_range
	
# input parameters
	stem=sprintf("%s","$6")
	exp_period = $5	
	zstep = $4
	zmax = $3
	zmin = $2
	y_resolution = $1

#derived paramaters
    exp_time = exp_period - 0.0015 
    upw = y_resolution * ( exp_time / exp_period )
    y_start = rot_cen - scan_range/2.0 - upw/2.0
    speed = y_resolution / exp_period
    n_pat = scan_range / y_resolution + 1
    n_omega = int(sample_size / y_resolution)+1
    omega_step = 180 / (n_omega-1)
	if((zmax > zmin && zstep < 0) || (zmax < zmin && zstep > 0)) zstep = -(zstep)
	nz=(zmax-zmin)/zstep+1
	
	p "exp_time =",exp_time
	p "upw =",upw
	p "y_start =",y_start
	p "n_pat =",n_pat
	p "n_omega =",n_omega
	p "omega_step =",omega_step
	p "nz =",nz

	p "Approximate time needed",nz*n_omega*n_pat*exp_period/60,"seconds plus moving time"
	p "Estimated moving time",1.87*nz*n_omega

	p "Collecting to",stem

    xrddir=sprintf("/data/visitor/in1039/id15/data/xrdct")
    unix(sprintf("mkdir -p %s",xrddir))
    unix(sprintf("chmod 777 %s",xrddir))
	
    fastscanaxis aeroy
    shopen
    umv fsh 1
	
	eval(sprintf("umv hrz %f",zmin))
	
	for(iii=0;iii<nz;iii++){

		if(A[hrz]>=0){
    		prefix=sprintf("%s_z%.4d",stem,A[hrz]*1000)
		} else {
    		prefix=sprintf("%s_zm%.4d",stem,-(A[hrz]*1000))
		}
    	unix(sprintf("mkdir -p %s/%s",xrddir,prefix))
   		unix(sprintf("chmod 777 %s/%s",xrddir,prefix))
		specfile=sprintf("%s/%s/%s.spec",xrddir,prefix,prefix)
		eval(sprintf("newfile %s",specfile))
    
    	str = sprintf("/gz/%s/%s %s_ 0 1",xrddir, prefix, prefix)
    	fastscan_new_file_function(str) 

    	str = sprintf("aerox %f %f %d %f %f %f 0 1 %d %f 1 1 0",omega_start,omega_step,n_omega,y_start,y_resolution,upw,n_pat,speed) 
    	fastscan2d_function(FAST_SCAN2D_PAR, str)
    	eval(sprintf("umvr hrz %f",zstep))
		waitmove;getangles
		parfile=sprintf("%s/%s/%s.par",xrddir,prefix,prefix)
		on(parfile)
		p FAST_SCAN2D_PAR 
		p FAST_SCAN
		close(parfile)
    }
    fshclose ; shclose  
	eval(sprintf("umv aerox %f", omega_start)) 
   	eval(sprintf("umv aeroy %f", rot_cen))
}'

def BSCFmap '{

    global FAST_SCAN 
	local PREFIX Z_POS
    local iii y_step z_step ny nz y_start exp_time y_end upw pw exp_period y_scan_direction z_scan_direction z_pos
    local dir0 specfile

    dir0 = "/data/visitor/in1039/id15/data/xrd"

    
    if ( $# != 2 ) { p "Usage: BSCFmap prefix exptime" ; exit }
    PREFIX = "$1"
    exp_time = $2 ;
    
    y_start = -106 ;
    y_end = -104 ;
    y_step = .50 ;
    z_start = 3.85 ;
    z_end = 4.15 ;
    z_step = .1 ;


    upw = y_step / 2 ;
    speed = upw / exp_time ;
    nz = fabs((z_end-z_start)/z_step) ;
    ny = fabs((y_end-y_start)/y_step) ;
    y_scan_direction = (y_end-y_start) / fabs(y_end-y_start) ;
    z_scan_direction = (z_end-z_start) / fabs(z_end-z_start) ;
    fastlivestop ; fastscanaxis aeroy ;
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; unix(sprintf("chmod 777 %s",xrddir)) ;
	specfile=sprintf("%s/%s.spec",xrddir,PREFIX)
	eval(sprintf("newfile %s",specfile))
    shopen ;
	
	str = sprintf("/gz/%s %s_ 0 1",xrddir, PREFIX)
	fastscan_new_file_function(str) 
	
	
    for (iii=0; iii<=nz ; iii++) {
    	z_pos = z_start+iii*z_step*z_scan_direction
    	umv hrz z_pos ;
		newprefix = sprintf("%s_%d",PREFIX,z_pos*1000) ;
    	str = sprintf("/gz/%s %s_ 0 0 0",xrddir,newprefix) ; fastscan_new_file_function(str) ;
		umv fsh 1 ;
    	str = sprintf("%f %f %f 0 1 %d %f %d 1",y_start,y_step,upw,ny+1,speed,y_scan_direction)
    	fastscan_function(FAST_SCAN, str)
    	fshclose ;
    }
    shclose
}'

def JM_map '{

    global FAST_SCAN 
	local PREFIX Z_POS
    local iii z_step nz exp_time upw pw exp_period z_scan_direction z_pos
    local dir0 specfile z_start z_end z_step

    dir0 = "/data/visitor/in1039/id15/data/xrd"

    
    if ( $# != 5 ) { p "Usage: XRD map prefix exptime zstart zend zstep" ; exit }
    PREFIX = "$1"
    exp_time = $2 ;
    
    z_start = $3 ;
    z_end = $4 ;
    z_step = $5 ;

    nz = fabs((z_end-z_start)/z_step) ;
    z_scan_direction = (z_end-z_start) / fabs(z_end-z_start) ;
    fastlivestop ; 
	fastscanaxis aeroy ;
	
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; 
	unix(sprintf("chmod 777 %s",xrddir)) ;
	
#	specfile=sprintf("%s/%s.spec",xrddir,PREFIX)
#	eval(sprintf("newfile %s",specfile))
    shopen ;
	
#	str = sprintf("/gz/%s %s_ 0 1",xrddir, PREFIX)
#	fastscan_new_file_function(str) 
	
	aeroaxisfreerun aerox 1
	
    for (iii=0; iii<=nz ; iii++) {
    	z_pos = z_start+iii*z_step*z_scan_direction
    	umv hrz z_pos ;
		newprefix = sprintf("%s_%d",PREFIX,z_pos*1000) ;
		
		specfile = sprintf("%s/%s.spec",xrddir,newprefix);
		eval(sprintf("newfile %s",specfile));
		
		str = sprintf("/gz/%s %s_ 0 1",xrddir, newprefix)
		fastscan_new_file_function(str) ;
		umv fsh 1 ;
		
		gtake $2
    	fshclose ;
    }
	aerofreestop
	aerorefx
    shclose
}'

def oneshot '{

	local dir0 xrddir specfile PREFIX

	if($# != 2){
		printf("%s name time\n", "$0")
		exit
	}
	
	PREFIX="$1"
	
    dir0 = "/data/visitor/in1039/id15/data/xrd"
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; unix(sprintf("chmod 777 %s",xrddir)) ;
	specfile=sprintf("%s/%s.spec",xrddir,PREFIX)
	eval(sprintf("newfile %s",specfile))
	str = sprintf("/gz/%s %s_ 0 1",xrddir, PREFIX)
	fastscan_new_file_function(str) 
	
	aeroaxisfreerun aerox 1
	gtake $2
	aerofreestop
	aerorefx
}'

def oneshot_norot '{

	local dir0 xrddir specfile PREFIX

	if($# != 1){
		printf("%s name \n", "$0")
		exit
	}
	
	PREFIX="$1"
	
    dir0 = "/data/visitor/in1039/id15/data/xrd"
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; unix(sprintf("chmod 777 %s",xrddir)) ;
	specfile=sprintf("%s/%s.spec",xrddir,PREFIX)
	eval(sprintf("newfile %s",specfile))
	str = sprintf("/gz/%s %s_ 0 1",xrddir, PREFIX)
	fastscan_new_file_function(str) 
	
	gtake 250
}'

	
def oneshotpdf '{

	local dir0 xrddir specfile PREFIX

	if($# != 2){
		printf("%s name time\n", "$0")
		exit
	}
	
	PREFIX="$1"
	
    dir0 = "/data/visitor/in1039/id15/data/pdf"
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; unix(sprintf("chmod 777 %s",xrddir)) ;
	specfile=sprintf("%s/%s.spec",xrddir,PREFIX)
	eval(sprintf("newfile %s",specfile))
	str = sprintf("/gz/%s %s_ 0 1",xrddir, PREFIX)
	fastscan_new_file_function(str) 
	
	aeroaxisfreerun aerox 1
	gtake $2
	aerofreestop
	aerorefx
}'	

def zscan '{


    global FAST_SCAN 
    local PREFIX Z_POS
    local iii z_step nz exp_time upw pw exp_period z_scan_direction z_pos
    local dir0 specfile z_start z_end z_step

    dir0 = "/data/visitor/in1039/id15/data/xrd"
    
    if ( $# != 5 ) { p "Usage: XRD map prefix exptime zstart zend zstep" ; exit }
    PREFIX = "$1"
    exp_time = $2 ;
    
    z_start = $3 ;
    z_end = $4 ;
    z_step = $5 ;

    nz = fabs((z_end-z_start)/z_step) ;
    z_scan_direction = (z_end-z_start) / fabs(z_end-z_start) ;
    fastlivestop ; 
    
    
#    axis aeroy ;
	
    xrddir = sprintf("%s/%s/",dir0,PREFIX)
    unix(sprintf("mkdir -p %s",xrddir)) ; 
    unix(sprintf("chmod 777 %s",xrddir)) ;

    shopen ;
	
	
    for (iii=0; iii<=nz ; iii++) {
    	z_pos = z_start+iii*z_step*z_scan_direction
    	umv hrz z_pos ;
		newprefix = sprintf("%s_%d",PREFIX,z_pos*1000) ;
		
		specfile = sprintf("%s/%s.spec",xrddir,newprefix);
		eval(sprintf("newfile %s",specfile));
		
		str = sprintf("/gz/%s %s_ 0 1",xrddir, newprefix)
		fastscan_new_file_function(str) ;
		umv fsh 1 ;
		
		gtake $2
    	fshclose ;
    }
    shclose
}'

def yzscan '{

	if($# != 7){
		printf("Usage: %s ystep z_min z_max zstep acq_time base_name sample_size\n","$0")
		exit
	}

    global FAST_SCAN2D_PAR FAST_SCAN
    local sample_size scan_range y_resolution omega_start n_omega omega_step y_start rot_cen upw speed exp_time exp_period str 
    local xrddir iii stem prefix parfile specfile
	
# fixed parameters
#    sample_size = 10.2 # for d = 4mm
	sample_size = $7
    scan_range = sample_size + 1.0
    rot_cen = -100
    omega_start = 0
	p "Sample Size =",sample_size
	p "Scan Range =", scan_range
	
# input parameters
#    exp_period = .010 
#    y_resolution = 0.050
	stem=sprintf("%s","$6")
	exp_period = $5	
	zstep = $4
	zmax = $3
	zmin = $2
	y_resolution = $1

#derived paramaters
    exp_time = exp_period - 0.0015 
    upw = y_resolution * ( exp_time / exp_period )
    y_start = rot_cen - scan_range/2.0 - upw/2.0
    speed = y_resolution / exp_period
    n_pat = scan_range / y_resolution + 1
#    n_omega = int(sample_size / y_resolution)+1
#    omega_step = 180 / (n_omega-1)
    n_omega = 1
    omega_step = 0
	if((zmax > zmin && zstep < 0) || (zmax < zmin && zstep > 0)) zstep = -(zstep)
	nz=(zmax-zmin)/zstep+1
	
	p "exp_time =",exp_time
	p "upw =",upw
	p "y_start =",y_start
	p "n_pat =",n_pat
	p "n_omega =",n_omega
	p "omega_step =",omega_step
	p "nz =",nz

	p "Approximate time needed",nz*n_omega*n_pat*exp_period/60,"seconds plus moving time"
	p "Estimated moving time",1.87*nz*n_omega

	p "Collecting to",stem

    xrddir=sprintf("/data/visitor/in1039/id15/data/xrd")
    unix(sprintf("mkdir -p %s",xrddir))
    unix(sprintf("chmod 777 %s",xrddir))
	
    fastscanaxis aeroy
    shopen
    umv fsh 1
	
	eval(sprintf("umv hrz %f",zmin))
	
	for(iii=0;iii<nz;iii++){

		if(A[hrz]>=0){
    		prefix=sprintf("%s_z%4d",stem,A[hrz]*1000)
		} else {
    		prefix=sprintf("%s_zm%4d",stem,-(A[hrz]*1000))
		}
    	unix(sprintf("mkdir -p %s/%s",xrddir,prefix))
   		unix(sprintf("chmod 777 %s/%s",xrddir,prefix))
		specfile=sprintf("%s/%s/%s.spec",xrddir,prefix,prefix)
		eval(sprintf("newfile %s",specfile))
    
    	str = sprintf("/gz/%s/%s %s_ 0 1",xrddir, prefix, prefix)
    	fastscan_new_file_function(str) 

    	str = sprintf("aerox %f %f %d %f %f %f 0 1 %d %f 1 1 0",omega_start,omega_step,n_omega,y_start,y_resolution,upw,n_pat,speed) 
    	fastscan2d_function(FAST_SCAN2D_PAR, str)
    	eval(sprintf("umvr hrz %f",zstep))
		waitmove;getangles
		parfile=sprintf("%s/%s/%s.par",xrddir,prefix,prefix)
		on(parfile)
		p FAST_SCAN2D_PAR 
		p FAST_SCAN
		close(parfile)
    }
    fshclose ; shclose  
	eval(sprintf("umv aerox %f", omega_start)) 
   	eval(sprintf("umv aeroy %f", rot_cen))
}'





def xrdct_forever '{
	local namestem
	if($# < 6){
		printf("Usage %s ystep z_min z_max zstep acq_time base_name (sleep_time)\n","$0")
		exit
	}
		
	if($# > 6){
		local sleep_time time_left
		sleep_time=$7
		
		p "Sleeping for",sleep_time,"seconds between dcts"
	}
	nnn=0
	while(1){
		namestem=sprintf("%s_%04d_", "$6", nnn)	
		print namestem
		eval(sprintf("xrdct3d %f %f %f %f %f %s",$1,$2,$3,$4,$5,namestem,10))
		if(sleep_time > 0){	
			time_left=sleep_time
			while(time_left>0){
				sleep(1)
				printf("sleeping for %d more seconds\n", time_left--)
			}
		}
		nnn++
	}
}'

		

def absct '{

	if($# < 2){
		printf("Usage %s prefix exp_time/s (rot_centre)\n","$0")
		exit
	}

    global FAST_SCAN2D_PAR FAST_SCAN
	
    local exptime speed upw omega_step npatt readout_time omega_range nflat ndark str
    local absdir prefix rot_centre
 	
    omega_step = 0.1
    exptime = $2 # seconds
    readout_time = 0.001
    omega_range = 190
    nflat = 100
    ndark = 100
	if ($#>2){
		rot_centre=$3
	} else {
		rot_centre=-100
	}
    
    absdir=sprintf("/data/visitor/in1039/id15/data/absct")
    unix(sprintf("mkdir -p %s",absdir))
    unix(sprintf("chmod 777 %s",absdir))
    prefix=sprintf("%s","$1")
	
	print "writing to",prefix
	
    unix(sprintf("mkdir -p %s/%s",absdir,prefix))
    unix(sprintf("chmod 777 %s/%s",absdir,prefix))

    speed = omega_step/(exptime+readout_time)
    upw = speed * exptime
    npatt = omega_range/omega_step
    
    str = sprintf("/gz/%s/%s %s_ 0",absdir, prefix, prefix)
    fastscan_new_file_function(str) 

    fastscanaxis aerox
    shopen
    umv fsh 1
#   tomo
    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre, omega_step,upw,npatt,speed) 
    fastscan2d_function(FAST_SCAN2D_PAR, str)

#   acquire dark field
    fshclose
	shclose # otherwise you can see lambda/3
    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre, omega_step,upw,ndark,speed) 
    fastscan2d_function(FAST_SCAN2D_PAR, str)

#   flat
	shopen
    umv fsh 1 
    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre-40, omega_step,upw,nflat,speed) 
    fastscan2d_function(FAST_SCAN2D_PAR, str)
    umv aeroy -100 aerox 0
    shclose

}'

def collectflat '{

	if($# < 2){
		printf("Usage %s prefix exp_time/s (rot_centre)\n","$0")
		exit
	}

    global FAST_SCAN2D_PAR FAST_SCAN
	
    local exptime speed upw omega_step npatt readout_time omega_range nflat ndark str
    local absdir prefix rot_centre
 	
    omega_step = 0.1
    exptime = $2 # seconds
    readout_time = 0.001
    omega_range = 190
    nflat = 100
    ndark = 100
	if ($#>2){
		rot_centre=$3
	} else {
		rot_centre=-100
	}
    
    absdir=sprintf("/data/visitor/in1039/id15/data/absct")
    unix(sprintf("mkdir -p %s",absdir))
    unix(sprintf("chmod 777 %s",absdir))
    prefix=sprintf("%s","$1")
	
	print "writing to",prefix
	
    unix(sprintf("mkdir -p %s/%s",absdir,prefix))
    unix(sprintf("chmod 777 %s/%s",absdir,prefix))

    speed = omega_step/(exptime+readout_time)
    upw = speed * exptime
    npatt = omega_range/omega_step
    
    str = sprintf("/gz/%s/%s %s_ 0",absdir, prefix, prefix)
    fastscan_new_file_function(str) 

    fastscanaxis aerox
    shopen
    umv fsh 1
#   tomo
#    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre, omega_step,upw,npatt,speed) 
#    fastscan2d_function(FAST_SCAN2D_PAR, str)

#   acquire dark field
#    fshclose
#	shclose # otherwise you can see lambda/3
#    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre, omega_step,upw,ndark,speed) 
#    fastscan2d_function(FAST_SCAN2D_PAR, str)

#   flat
#	shopen
#    umv fsh 1 
    str = sprintf("aeroy %f 0 1 0 %f %f 0 1 %d %f 1 0 1",rot_centre-40, omega_step,upw,nflat,speed) 
    fastscan2d_function(FAST_SCAN2D_PAR, str)
    umv aeroy -100 aerox 0
    shclose

}'

def absct_stitched '{
# do as many as you want
	local nrots iii rotc[] fname
	rotc[0]=0
	if($# < 2){
		printf("usage: %s prefix ct_time (rot_centre_0 [-100], rot_centre_1... rot_centre_n)\n","$0")
		exit
	}
	if($# < 3){
		absct $1 $2
	} else {
		nrots=split("$*" ,rotc)-2
		for(iii=0;iii<nrots;iii++){
			fname=sprintf("%s%03d_","$1",iii)
#			print rotc[iii+2],fname
			eval(sprintf("absct %s %f %f\n", fname, $2, rotc[iii+2]))
		}
	}
}'


def absconf '{

    shclose ; fshclose ;
	
    fastscancamera edge 1 1
    remote_eval("l-id15-4:optics","umv U22a 15")
    remote_eval("l-id15-4:optics","umv s1vg 3 s1hg 4.2")
    remote_eval("l-id15-4:optics","tfselect oh1")
    remote_eval("l-id15-4:optics","tfoutall")
    remote_eval("l-id15-4:optics","tfselect oh2")
    remote_eval("l-id15-4:optics","tfoutall")
	umv ddx 1250 ssy 32 aeroy -100 s4vg 10 s4hg 10
    umv ddy 468 idx 233.395 idy -200.445 idz 7.59 ssy 32 aeroy -100 bcuz 70 bsz -5 bsy 32
    shopen ; umv fsh 1


}'


def absconfbat '{

    shclose ; fshclose ;
	
    fastscancamera edge 1 1
    remote_eval("l-id15-4:optics","umv U22a 14")
    remote_eval("l-id15-4:optics","umv s1vg 3 s1hg 4.2")
    remote_eval("l-id15-4:optics","tfselect oh1")
    remote_eval("l-id15-4:optics","tfoutall")
    remote_eval("l-id15-4:optics","tfselect oh2")
    remote_eval("l-id15-4:optics","tfoutall")
    umv ssy 32 aeroy -100 s4vg 10 s4hg 10
    umv ddy 468 idx 2000 idy -200.445 idz 7.59 ssy 32 aeroy -100 bcuz 70 bsz -5 bsy 32
    shopen ; fshclose


}'


def absconf_low_en '{

    local energy u22gap
    energy = 42 ; 
    u22gap = 14.006 ;
    shclose ; fshclose ;
	
    fastscancamera edge 1 1
    remote_eval("l-id15-4:optics",sprintf("umv U22a %f",u22gap))
    remote_eval("l-id15-4:optics",sprintf("ll_energy %f",energy))

    remote_eval("l-id15-4:optics","umv s1vg 3 s1hg 4.2")
    remote_eval("l-id15-4:optics","tfselect oh1")
    remote_eval("l-id15-4:optics","tfoutall")
    remote_eval("l-id15-4:optics","tfselect oh2")
    remote_eval("l-id15-4:optics","tfoutall")
	umv ddx 1250 ssy 32 aeroy -100 s4vg 10 s4hg 10
    umv ddy 468 idx 233.395 idy -200.445 idz 7.59 ssy 32 aeroy -100 bcuz 70 bsz -5 bsy 32
    shopen ; umv fsh 1


}'

def xrdconf '{
    shclose ; fshclose ; fastlivestop

	if(A[ddx]<750){ # if coming from pdfconf, make sure far enough away
		umv ddx 750
	}
    remote_eval("l-id15-4:optics","umv s1vg .35 s1hg .35")
    remote_eval("l-id15-4:optics","tfselect oh1")
    remote_eval("l-id15-4:optics","tfin 5; tfin 9; tfin 10")
    remote_eval("l-id15-4:optics","tfselect oh2")
    remote_eval("l-id15-4:optics","tfin 2; tfin 7; tfin 8; tfin 9; tfin 10") 
    remote_eval("l-id15-4:optics","umv U22a 6.091")
    umv bsy 32 bsz 0 bcuz 0 s6hg .1 s6vg .1 s4vg .25 s4hg .25  idy 523 ddy 31.5 ddz 0
    umv ddx 750 ssy 32 aeroy -100
    fastscancamera pilatus 200 1
	limaset pilatus threshold 47500
	limaset pilatus image_roi 0 0 1475 1679
    shopen


}'

def pdfconf '{
    shclose ; fshclose ; fastlivestop

    remote_eval("l-id15-4:optics","umv s1vg .45 s1hg .35")
    remote_eval("l-id15-4:optics","tfselect oh1")
    remote_eval("l-id15-4:optics","tfin 5; tfin 9; tfin 10")
    remote_eval("l-id15-4:optics","tfselect oh2")
    remote_eval("l-id15-4:optics","tfin 2; tfin 7; tfin 8; tfin 9; tfin 10") 
    remote_eval("l-id15-4:optics","umv U22a 6.091")
    umv bsy 32 bsz 0 bcuz 0 s6hg .1 s6vg .1 s4vg .25 s4hg .25 idy 523 ddy -80  ddz 109.5
    umv ddx 300 ssy 32 aeroy -100 
    fastscancamera pilatus 200 1
	limaset pilatus threshold 47500
    shopen


}'

####################################################################################

def fastxrdct '{

#   Pilatus detector triggered by fastscan on aerox axis while aeroy moves slowly in freerun. Aeroy moves
#   y_step while aerox rotates 180deg.
#   Exposure period (pattern width) must be 0.95s longer than exposure time (up width), where 0.95s
#   is the detector readout time. Due to small aerox speed variations it is better to increase to 1.5s
#   
    global FAST_SCAN_PAR[] DATAFILE XRD_CT_PAR[] FAST_SCAN[]
    local prefix dir gz_dir patw upw downw
    local exp_period exp_time readout_time safety_time
    local n_omega omega_step omega_start ny y_step y_start y_start_real
    local y_speed omega_speed n_pat omega_acc0 t_acc
    local str cam_name file_pars[] i data_suffix multi_frame_edf

#   example of input parameters
#    XRD_CT_PAR["file"]["dir"] = "/data/id15/inhouse2/inhouse03/CH4782/data/xrd/xrdct/Ni3D"
#    XRD_CT_PAR["file"]["prefix"] = "Ni3D"
#    XRD_CT_PAR["file"]["suffix"] = ".cbf"
#    XRD_CT_PAR["scan_par"]["n_omega"] = 72
#    XRD_CT_PAR["scan_par"]["ny"] = 100
#    XRD_CT_PAR["scan_par"]["omega_start"] = 0
#    XRD_CT_PAR["scan_par"]["rot_center"] = 19.75
#    XRD_CT_PAR["scan_par"]["y_start"] = 18.5
#    XRD_CT_PAR["scan_par"]["y_step"] = .025
#    XRD_CT_PAR["scan_par"]["exp_period"] = .007500
#    XRD_CT_PAR["scan_par"]["exp_time"] = .006000
#    XRD_CT_PAR["pilatus"]["readout_time"] = .000950
#    XRD_CT_PAR["pilatus"]["safety_time"] = .000500

     prefix = XRD_CT_PAR["file"]["prefix"]
     dir = XRD_CT_PAR["file"]["dir"]
     data_suffix = XRD_CT_PAR["file"]["suffix"]
     n_omega = XRD_CT_PAR["scan_par"]["n_omega"]
     ny = XRD_CT_PAR["scan_par"]["ny"]
     omega_start = XRD_CT_PAR["scan_par"]["omega_start"]
     rot_center = XRD_CT_PAR["scan_par"]["rot_center"]
     y_start = XRD_CT_PAR["scan_par"]["y_start"]
     y_step = XRD_CT_PAR["scan_par"]["y_step"]
     exp_period = XRD_CT_PAR["scan_par"]["exp_period"]
     exp_time = XRD_CT_PAR["scan_par"]["exp_time"]
     readout_time = XRD_CT_PAR["pilatus"]["readout_time"]
     safety_time = XRD_CT_PAR["pilatus"]["safety_time"]

     multi_frame_edf = ( data_suffix == ".edf" )
	 print "Saving to",dir

#    fixed parameters
     aerovelaccel aerox 120 1

#    calculations
     omega_step = 180 / n_omega
     omega_speed = omega_step / exp_period
#     y_speed = y_step / ( exp_period * n_omega )
# now with new factor of 2
     y_speed = y_step / ( exp_period * n_omega ) / 2.0
     patw = omega_step
     upw = patw * ( exp_time / exp_period )
     downw = 0
#	 CHANGED BY MDM AND AV ON 16/10/2017
#	 n_pat = ny * n_omega + 1
     n_pat = ny * n_omega + 2 * n_omega
     omega_acc0 = AERO["rot"]["speed"] / AERO["rot"]["accel_time"] 
     t_acc = omega_speed / omega_acc0
     omega_acc_path = 0.5 * omega_acc0 * t_acc * t_acc
     omega_acc_path = omega_acc_path 
     y_start_real = y_start - t_acc * y_speed ; 

#    print scan parameters
     printf("\nExposure period = %f s\n",exp_period)
     printf("Exposure time   = %f s\n",exp_time)
     printf("Number of projections  = %d\n",n_omega)
     printf("Number of translations = %d\n",ny)
     printf("Start angle    = %f deg\n",omega_start)
     printf("Angular step   = %f deg\n",omega_step)
     printf("Rotation speed = %f deg/s\n",omega_speed)
     printf("Start translation     = %f mm\n",y_start)
     printf("Rotation center       = %f mm\n",rot_center)
     printf("End translation       = %f mm\n",y_start+y_step*ny)
     printf("Translation step      = %f mm\n",y_step)
     printf("Translation sub-step  = %f mm\n",y_step/n_omega)
     printf("Translation speed     = %f mm/s\n",y_speed)
     printf("Tomography scan time = %d s\n",n_omega*ny*exp_period)
     printf("Minimum rotation acceleration path = %f deg\n",omega_acc_path)
	

#    check exposure time and exposure period
     if ( (exp_time+safety_time+readout_time) > exp_period ) { printf("Exposure time too long!\n") ; exit }
    
     shopen ; ct 
	
# Maybe	
	 fastscanaxis aerox
	
#    asign directory and prefix names
     cam_name = fastscan_cam_name(FAST_SCAN["cam"]["curr"])
     FAST_SCAN["file"]["inum"] = 0
     FAST_SCAN["file"]["overwrite"] = 0
     FAST_SCAN["file"]["suffix"] = data_suffix
     FAST_SCAN["file"]["dir"] = sprintf("/gz/%s",XRD_CT_PAR["file"]["dir"])
     FAST_SCAN["file"]["prefix"] = sprintf("%s_",XRD_CT_PAR["file"]["prefix"])
     for (i in FAST_SCAN["file"]) { file_pars[i] = FAST_SCAN["file"][i] }
     fastscan_cam_set_file_pars(cam_name, file_pars)
	    
#    create directory for saving files
     unix(sprintf("mkdir -p %s",dir)) ; unix(sprintf("chmod 777 %s",dir))

#    create data file for monitor diode
     DATAFILE = sprintf("%s/%s.spec",dir,prefix) ; eval(sprintf("newfile %s 0",DATAFILE))

#    reset aeroy (remove FREERUN and restore NORMAL) in case there was a crash
     AERO["tr"]["stat"] = "NORMAL"
#    position the sample
     aerorefx ; aerovelaccel aerox 360 2 ; umv aerox -omega_acc_path

     aerovelaccel aeroy 5 0.5 ; umv aeroy y_start_real
	 print y_start_real


#    start tomo scan
     umv fsh 1
     aerovelaccel aeroy y_speed 0.25 ; sleep(.5)
     printf("\nStart aeroy freerun\n") ;
     aero_start_freerun("aeroy",1)
     printf("\nStart fastscan\n")
     str = sprintf("%f %f %f 0 1 %d %f 1 %d", omega_start, patw, upw, n_pat, omega_speed, multi_frame_edf)
     fastscan_function( FAST_SCAN_PAR, str)
     printf("\n\nEnd fastscan\n\n")
     printf("\nStop aeroy freerun\n") ;
     aero_stop_freerun("aeroy") 
     fshclose
	    
#    move motors to original position
     aerovelaccel aeroy 5 0.5 ; umv aeroy rot_center
     aerorefx ; aerovelaccel aerox 120 1

}'


##################################################################

def fastxrdct3d '{

	if($# != 8){
		printf("Usage: %s ystep z_min z_max zstep exp_time base_name sample_size scan_size\n","$0")
		exit
	}

    global XRD_CT_PAR[]
    local nz zstep zmin zmax sample_size scan_size iii z_pos ddir

	zmin=$2
	zmax=$3
	zstep=$4
	if((zmax > zmin && zstep < 0) || (zmax < zmin && zstep > 0)) zstep = -(zstep)
	nz=(zmax-zmin)/zstep+1
    
	sample_size=$7
	scan_size=$8

    XRD_CT_PAR["file"]["suffix"] = ".cbf"
    XRD_CT_PAR["pilatus"]["readout_time"] = 0.000950
    XRD_CT_PAR["pilatus"]["safety_time"] = 0.000500
    XRD_CT_PAR["scan_par"]["exp_time"] = $5
    XRD_CT_PAR["scan_par"]["exp_period"] =  XRD_CT_PAR["scan_par"]["exp_time"]+0.001500
    XRD_CT_PAR["scan_par"]["n_omega"] = sample_size/$1
    XRD_CT_PAR["scan_par"]["ny"] = scan_size/$1
    XRD_CT_PAR["scan_par"]["omega_start"] = 0
    XRD_CT_PAR["scan_par"]["rot_center"] = -100
    XRD_CT_PAR["scan_par"]["y_start"] = XRD_CT_PAR["scan_par"]["rot_center"]-scan_size/2
    XRD_CT_PAR["scan_par"]["y_step"] = $1

	stem=sprintf("%s","$6")
	p "Collecting to",stem

    xrddir=sprintf("/data/visitor/in1039/id15/data/xrdct")
    unix(sprintf("mkdir -p %s",xrddir))
    unix(sprintf("chmod 777 %s",xrddir))
	
    shopen
    umv fsh 1

	for(iii=0;iii<nz;iii++){
		if(A[hrz]>=0){
    		prefix=sprintf("%s_z%.4d",stem,A[hrz]*1000)
		} else {
    		prefix=sprintf("%s_zm%.4d",stem,-(A[hrz]*1000))
		}
		ddir=sprintf("%s/%s",xrddir,prefix)
    	unix(sprintf("mkdir -p %s",ddir))
  		unix(sprintf("chmod 777 %s",ddir))
		specfile=sprintf("%s/%s.spec",ddir,prefix)
		eval(sprintf("newfile %s",specfile))
		XRD_CT_PAR["file"]["dir"] = sprintf("%s",ddir)
        XRD_CT_PAR["file"]["prefix"] = sprintf("%s",prefix)
		z_pos = zmin + iii * zstep
		umv hrz z_pos
		fastxrdct
    }

}'


#####################################################################


def __zscan'{

	if($# != 8){
		printf("Usage: %s ymin ymax ystep z_min z_max zstep acq_time base_name\n","$0")
		exit
	}

    global XRD_CT_PAR[]
    local nz zstep zmin zmax sample_size scan_size iii z_pos ddir

	ymin=$2
	ymax=$3
	ystep=$4
	zmin=$5
	zmax=$6
	zstep=$7
	if((ymax > ymin && ystep < 0) || (ymax < ymin && ystep > 0)) ystep = -(ystep)
	ny=(ymax-ymin)/ystep+1
	if((zmax > zmin && zstep < 0) || (zmax < zmin && zstep > 0)) zstep = -(zstep)
	nz=(zmax-zmin)/zstep+1
    
	stem=sprintf("%s","$6")
	p "Collecting to",stem

    xrddir=sprintf("/data/visitor/in1039/id15/data/xrd")
    unix(sprintf("mkdir -p %s",xrddir))
    unix(sprintf("chmod 777 %s",xrddir))
	
	
	ddir=sprintf("%s/%s",xrddir,prefix)
    unix(sprintf("mkdir -p %s",ddir))
  	unix(sprintf("chmod 777 %s",ddir))
	specfile=sprintf("%s/%s.spec",ddir,prefix)
	
	
    shopen
    umv fsh 1
	for(jjj=0;jjj<nz;jjj++){
		for(iii=0;iii<ny;iii++){

			eval(sprintf("newfile %s",specfile))
			XRD_CT_PAR["file"]["dir"] = sprintf("%s",ddir)
        	XRD_CT_PAR["file"]["prefix"] = sprintf("%s",prefix)
			y_pos=ymin*iii*ystep
			gtake $7
		}
		z_pos = zmin + jjj * zstep
#		umv hrz z_pos
    }

}'


def zabsct '{
	local prefix 
	if($# != 5){
		printf("Usage %s zmin zmax zstep prefix exp_time\n","$0")
		exit
	}
	
	umv hrz $1
	while(A[hrz] <= $2){
		prefix=sprintf("%s_%05d_","$4",1000*A[hrz])
		print prefix
		eval(sprintf("absct %s %f", prefix, $5))
		umvr hrz $3
	}
}'


